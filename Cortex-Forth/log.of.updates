Script started on Wed 07 Aug 2019 08:13:35 PM UTC

source of new material is: branch exp-m-gg

    /elsewhere/Steno-Keyboard-Arduino-tnr/Cortex-Forth/Cortex-Forth.ino

Wed Aug  7 20:14:15 UTC 2019

 $ git branch
* master

 $ pwd
Cortex-Forth/Cortex-Forth

 $ git checkout -b fload-bb-aa
Switched to a new branch 'fload-bb-aa'

 $ git branch
* fload-bb-aa

 $ cat /elsewhere/Steno-Keyboard-Arduino-tnr/Cortex-Forth/Cortex-Forth.ino > ./Cortex-Forth.ino

 $ cp  /elsewhere/Steno-Keyboard-Arduino-tnr/Cortex-Forth/dotstar.cpp .

 $ git branch
* fload-bb-aa

LONG OUTPUT:

 $ git diff | cat
diff --git a/Cortex-Forth/Cortex-Forth.ino b/Cortex-Forth/Cortex-Forth.ino
index 7df60b8..152b113 100644
--- a/Cortex-Forth/Cortex-Forth.ino
+++ b/Cortex-Forth/Cortex-Forth.ino
@@ -1,3 +1,17 @@
+// Thu Aug  1 14:21:20 UTC 2019 rev a1
+// On branch exp-m-gg
+
+// Tue Jul 30 11:59:58 UTC 2019 rev b
+// Sun Jun  9 01:26:44 UTC 2019
+
+// identify: kelsotle famixid puitveno  telintha kinpaplid palermo
+// previously: On branch exp-ee
+
+// added: wlist word
+
+// target: ItsyBitsy M4 Express - still current on branch exp-m-gg 01 August 2019
+// comm: TX/RX pair for the Forth interpreter - still current on branch exp-m-gg
+
 /*
   Forth virtual machine
 
@@ -5,13 +19,17 @@
 
 */
 
-#define RAM_SIZE 0x1000
+#define RAM_SIZE 0x1200
 #define S0 0x1000
 #define R0 0x0f00
 #define NAME(m, f, c, x, y, z) {memory.data [m] = f + c + (x << 8) + (y << 16) + (z << 24);}
 #define LINK(m, a) {memory.data [m] = a;}
 #define CODE(m, a) {memory.program [m] = a;}
 #define DATA(m, a) {memory.data [m] = a;}
+#define IMMED 0x80
+
+#define LINE_ENDING 10 // alt: 13
+extern void setup_dotstar(void); // dotstar.cpp
 
 // global variables
 union Memory {
@@ -28,6 +46,7 @@ int T = 0; // top of stack
 int H = 0; // dictionary pointer, HERE
 int D = 0; // dictionary list entry point
 int base = 10;
+boolean state = false; // compiling or not
 
 /*  A word in the dictionary has these fields:
   name  32b word,  a 32 bit int, made up of byte count and three letters
@@ -42,6 +61,13 @@ int base = 10;
 
 // primitive definitions
 
+void _LBRAC (void) {
+  state = false; // interpreting
+}
+
+void _RBRAC (void) {
+  state = true; // compiling
+}
 
 void _NOP (void) {
   return;
@@ -67,6 +93,7 @@ void _KEY (void) {
   _DUP ();
   while (!Serial1.available ());
   T = Serial1.read ();
+//  Serial1.write (T);
 }
 
 void _EMIT (void) {
@@ -80,7 +107,15 @@ void _CR (void) {
 }
 
 void _OK (void) {
-  if (tib [tib.length () - 1] == 10) Serial1.println (" Ok");
+  if (tib [tib.length () - 1] == LINE_ENDING) Serial1.println (" Ok");
+}
+
+void _WLIST (void) {
+  Serial1.print ("wlist warm type c! c@ literal repeat while again ' forget else then if until begin loop do i ; : ] [ R constant ? variable allot here create dump 2/ 2* negate abs invert xor or and - + h. space words .s . quit 0< depth number ?dup execute find , ! @ over swap drop dup word parse cr emit key exit ");
+}
+
+void _WARM (void) {
+  NVIC_SystemReset();      // processor software reset
 }
 
 void _SWAP (void) {
@@ -156,14 +191,6 @@ void _TWOSLASH (void) {
   T = (T >> 1);
 }
 
-void _WARM (void) {
-  NVIC_SystemReset();      // processor software reset
-}
-
-void _WLIST (void) {
-  Serial1.print ("wlist warm 2/ 2* negate abs invert xor or and - + h. space words .s . quit 0< depth number ?dup execute find , ! @ over swap drop dup word parse cr emit key exit ");
-}
-
 void _TWOSTAR (void) {
   T = (T << 1);
 }
@@ -200,30 +227,10 @@ void _NEST (void) {
   I = (W + 1);
 }
 
-void _CREATE (void) {
-
-}
-
-void _CONSTANT (void) {
-
-}
-
-void _VARIABLE (void) {
-
-}
-
-void _DO (void) {
-
-}
-
-void _LOOP (void) {
-
-}
-
 void _SHOWTIB (void) {
   W = tib.length ();
   tib [W - 1] = 0;
-  Serial1.print (tib);
+  Serial1.print (tib); // tnr // restored to original
 }
 
 // trim leading spaces
@@ -233,13 +240,18 @@ void _PARSE (void) {
   do {
     while (!Serial1.available ());
     t = Serial1.peek ();
-    if (t == ' ') t = Serial1.read ();
+    if (t == ' ') {
+      t = Serial1.read ();
+//      Serial1.write (t);
+    }
   } while (t == ' ');
   do {
     while (!Serial1.available ());
     t = Serial1.read ();
+//    Serial1.write (t);
     tib = tib + t;
   } while (t > ' ');
+  // tnr, suppressed // Serial1.print (tib);
 }
 
 void _WORD (void) {
@@ -269,7 +281,7 @@ void _NUMBER (void) {
     }
     t = tib [i];
     if (!isDigit (t)) {
-      if (tib [0] == '-') T = -T;
+    if (tib [0] == '-') T = -T;
       _DUP ();
       T = -1;
       return;
@@ -280,11 +292,24 @@ void _NUMBER (void) {
     T += t;
   }
   if (tib [0] == '-') T = -T;
+      if (state == true) {
+        _DUP ();
+        T = 1; // forward reference to lit
+        _COMMA (); // lit
+        _COMMA (); // the number
+      }
   _DUP ();
   T = 0;
 }
 
 void _EXECUTE (void) {
+  if (state == true) {
+    if (((memory.data [T]) & 0x80) == 0) {
+      T += 2;
+      _COMMA ();
+      return;
+    }
+  }
   W = (T + 2);
   _DROP ();
   memory.program [W] ();
@@ -295,7 +320,7 @@ void _FIND (void) {
   T = D;
   while (T != 0) {
     W = (memory.data [T]);
-    if (W == X) {
+    if ((W & 0xffffff7f) == X) {
       return;
     }
     T = memory.data [T + 1];
@@ -348,34 +373,30 @@ void _ZEROLESS () {
   T = 0;
 }
 
+void _DOTWORD () {
+  int Y = memory.data [W];
+  int X = (Y & 0xff);
+  Serial1.write ('[');
+  Serial1.print (X);
+  Serial1.write (' ');
+  X = ((Y >> 8) & 0xff);
+  _DUP (); T = X; _EMIT ();
+  X = ((Y >> 16) & 0xff);
+  if (X != 0) { _DUP (); T = X; _EMIT (); }
+  X = ((Y >> 24) & 0xff);
+  if (X != 0) { _DUP (); T = X; _EMIT (); }
+  Serial1.print ("] "); 
+}
+
 void _WORDS (void) {
-  int C = 0;
-  int X = 0;
-  int Y = 0;
+  int i = 0;
   W = D;
-  while (W) {
-    Y = memory.data [W];
-    C = (Y & 0xff);
-    X = ((Y >> 8) & 0xff);
-    _DUP (); T = X; _EMIT ();
-    X = ((Y >> 16) & 0xff);
-    if (X != 0) {
-      _DUP (); T = X; _EMIT ();
-    }
-    X = ((Y >> 24) & 0xff);
-    if (X != 0) {
-      _DUP (); T = X; _EMIT ();
-    }
-    C -= 4;
-    while (!(C < 0)) {
-      Serial1.print ("_");
-      C -= 1;
-    }
-    _SPACE ();
+  do {
+    _DOTWORD ();
     W = memory.data [++W];
-  }
-  _CR ();
-//  _DROP ();
+    i += 1;
+    if ((i % 8) == 0) _CR ();
+  } while (memory.data [W + 1]);
 }
 
 void _DEPTH (void) {
@@ -384,13 +405,258 @@ void _DEPTH (void) {
   T = W;
 }
 
+void _DUMP (void) {
+  int a = T;
+  _DROP ();
+  for (int i = 0; i < a; i++) {
+    W = T;
+    Serial1.print (memory.data [T++], HEX);
+    // Serial1.write (' ');
+    Serial1.write (" ~dump_delimiter~ ");
+    _DOTWORD ();
+  }
+}
+
+void _HERE (void) {
+  _DUP ();
+  T = H;
+}
+
+void _ALLOT (void) {
+  H += T;
+  _DROP ();
+}
+
+void _HEAD (void) {
+  _PARSE ();
+  _WORD ();
+  _COMMA ();
+  _DUP ();
+  T = D;
+  _COMMA ();
+  D = H - 2;
+}
+
+void _DOVAR (void) {
+  _DUP ();
+  T = (W + 1);
+}
+
+void _CREATE (void) {
+  _HEAD ();
+  _DUP ();
+  _DUP ();
+  memory.program [S] = _DOVAR;
+  _DROP ();
+  _COMMA ();
+}
+
+void _COLON (void) {
+  _HEAD ();
+  _DUP ();
+  _DUP ();
+  memory.program [S] = _NEST;
+  _DROP ();
+  _COMMA ();
+  _RBRAC ();
+}
+
+void _SEMI (void) {
+  _DUP ();
+  T = 25; // forward reference to exit 
+  _COMMA (); // compile exit
+  _LBRAC (); // stop compiling
+}
+
+void _DOCONST (void) {
+  _DUP ();
+  T = memory.data [W + 1];
+}
+
+void _CONSTANT (void) {
+  _HEAD ();
+  _DUP ();
+  _DUP ();
+  memory.program [S] = _DOCONST;
+  _DROP ();
+  _COMMA ();
+  _COMMA ();
+}
+
+void _VARIABLE (void) {
+  _CREATE ();
+  H += 1;
+}
+
+void _QUESTION (void) {
+  _FETCH ();
+  _DOT ();
+}
+
+void _R (void) {
+  _DUP ();
+  T = R;
+}
+
+void _DO (void) {
+  memory.data [--R] = T;
+  _DROP ();
+  memory.data [--R] = T;
+  _DROP ();
+}
+
+void _LOOP (void) {
+  int X = memory.data [R++];
+  W = (memory.data [R++] + 1);
+  if (W == X) {
+    I += 1;
+    return;
+  }
+  memory.data [--R] = (W);
+  memory.data [--R] = X;
+  I = memory.data [I];
+}
+
+void _I (void) {
+  _DUP ();
+  T = memory.data [R + 1];
+}
+
+void _CDO (void) {
+  _DUP ();
+  T = 4; // forward reference to ddo
+  _COMMA ();
+  _DUP ();
+  T = H;
+}
+
+void _CLOOP (void) {
+  _DUP ();
+  T = 5; // forward reference to lloop
+  _COMMA ();
+  _COMMA (); // address left on stack by do
+}
+
+void _CBEGIN (void) {
+  _DUP ();
+  T = H;
+}
+
+void _CUNTIL (void) {
+  _DUP ();
+  T = 3; // forward reference to Obranch
+  _COMMA ();
+  _COMMA (); // address left on stack by begin
+}
+
+void _CAGAIN (void) {
+  _DUP ();
+  T = 2; // forward reference to branch
+  _COMMA ();
+  _COMMA (); // address left on stack by begin
+}
+
+void _CIF (void) {
+  _DUP ();
+  T = 3; // forward reference to 0branch
+  _COMMA ();
+  _DUP ();
+  T = H; // address that needs patching later
+  _DUP ();
+  T = 0;
+  _COMMA (); // dummy in address field
+}
+
+void _CWHILE (void) {
+  _CIF ();
+  _SWAP ();
+}
+
+void _CTHEN (void) {
+  _DUP ();
+  T = H;
+  _SWAP ();
+  _STORE ();
+}
+
+void _CREPEAT (void) {
+  _CAGAIN ();
+  _CTHEN ();
+}
+
+void _CELSE (void) {
+  _DUP ();
+  T = 2; // forward reference to branch
+  _COMMA ();
+  _DUP ();
+  T = H; // address that needs patching later
+  _DUP ();
+  T = 0;
+  _COMMA (); // dummy in address field
+  _SWAP ();
+  _CTHEN ();
+}
+
+void _FORGET (void) {
+  _PARSE ();
+  _WORD ();
+  _FIND ();
+  D = memory.data [T + 1];
+  H = T;
+  _DROP ();
+}
+
+void _TICK (void) {
+  _PARSE ();
+  _WORD ();
+  _FIND ();
+}
+
+void _CLITERAL (void) {
+  _DUP ();
+  T = 1; // forward reference to lit
+  _COMMA ();
+  _COMMA (); // the number that was already on the stack
+}
+
+void _CFETCH (void) {
+  W = (T % 4);
+  T = memory.data [T / 4];
+  T = (T >> (W * 8) & 0xff);
+} 
+
+void _CSTORE (void) {
+  int X = (T / 4);
+  W = (T % 4);
+  _DROP ();
+  T = (T << (W * 8));
+  T = (T | (memory.data [X] & ~(0xff << (W * 8))));
+  memory.data [X] = T;
+  _DROP ();
+} 
+
+
+void _color_yellow_fg (void) {
+  Serial1.print("\033\133"); // ESC [
+  Serial1.print("\063\063"); // 33 - yellow fg
+  Serial1.print("m");        // for the stanza
+}
+
+void _color_blue_bg (void) {
+  Serial1.print("\033\133"); // ESC [
+  Serial1.print("\064\064"); // 44 - blue bg
+  Serial1.print("m");        // for the stanza
+}
 
-// do, loop
-// docol, doconst, dovar
+void _color_black_bg (void) {
+  Serial1.print("\033\133"); // ESC [
+  Serial1.print("\064\060"); // 40 - black bg
+  Serial1.print("m");        // for the stanza
+}
 
-// inner interpreter
 
 void setup () {
+  setup_dotstar(); // turn off dotstar (apa-102 RGB LED)
 
   S = S0; // initialize data stack
   R = R0; // initialize return stack
@@ -404,8 +670,10 @@ void setup () {
 #  define branch 2
   CODE(3, _0BRANCH)
 #  define zbranch 3
-  //  CODE(4, _DO)
-  //  CODE(5, _LOOP)
+  CODE(4, _DO)
+#  define ddo 4
+  CODE(5, _LOOP)
+#  define lloop 5
   CODE(6, _INITR)
 #  define initr 6
   CODE(7, _INITS)
@@ -416,21 +684,21 @@ void setup () {
 #  define ok 9
   // room to expand here
 
-  // words with dictionary links
-
   // trailing space kludge
   NAME(20, 0, 0, 10, 0, 0)
   LINK(21, 0)
   CODE(22, _NOP)
+#define nop 22
   // exit
   NAME(23, 0, 4, 'e', 'x', 'i')
   LINK(24, 20)
   CODE(25, _EXIT)
-  // key
+#  define exit 25
+  // key ( - c)
   NAME(26, 0, 3, 'k', 'e', 'y')
   LINK(27, 23)
   CODE(28, _KEY)
-  // emit
+  // emit ( c - )
   NAME(29, 0, 4, 'e', 'm', 'i')
   LINK(30, 26)
   CODE(31, _EMIT)
@@ -440,72 +708,74 @@ void setup () {
   LINK(33, 29)
   CODE(34, _CR)
 #  define cr 34
-  // parse
+  // parse // leaves string in tib
   NAME(35, 0, 5, 'p', 'a', 'r')
   LINK(36, 32)
   CODE(37, _PARSE)
 #  define parse 37
-  // word
+  // word ( - n) gets string from tib
   NAME(38, 0, 4, 'w', 'o', 'r')
   LINK(39, 35)
   CODE(40, _WORD)
 #  define wword 40
-  // dup
+  // dup ( n - n n)
   NAME(41, 0, 3, 'd', 'u', 'p')
   LINK(42, 38)
   CODE(43, _DUP)
 #  define dup 43
-  // drop
+  // drop ( n - )
   NAME(44, 0, 4, 'd', 'r', 'o')
   LINK(45, 41)
   CODE(46, _DROP)
 #  define drop 46
-  // swap
+  // swap ( n1 n2 - n2 n1)
   NAME(47, 0, 4, 's', 'w', 'a')
   LINK(48, 44)
   CODE(49, _SWAP)
-  // over
+#  define swap 49
+  // over ( n1 n2 - n1 n2 n1)
   NAME(50, 0, 4, 'o', 'v', 'e')
   LINK(51, 47)
   CODE(52, _OVER)
-  // @
+#  define over 52
+  // @ ( a - n)
   NAME(53, 0, 1, '@', 0, 0)
   LINK(54, 50)
   CODE(55, _FETCH)
-  // !
+  // ! ( n a - )
   NAME(56, 0, 1, '!', 0, 0)
   LINK(57, 53)
   CODE(58, _STORE)
-  // ,
+  // , ( n - )
   NAME(59, 0, 1, ',', 0, 0)
   LINK(60, 56)
   CODE(61, _COMMA)
-  // find
+  // find ( n - a)
   NAME(62, 0, 4, 'f', 'i', 'n')
   LINK(63, 59)
   CODE(64, _FIND)
 #  define find 64
-  // execute
+  // execute ( a)
   NAME(65, 0, 7, 'e', 'x', 'e')
   LINK(66, 62)
   CODE(67, _EXECUTE)
 #  define execute 67
-  // ?dup
+  // ?dup ( n - 0 | n n)
   NAME(68, 0, 3, '?', 'd', 'u')
   LINK(69, 65)
   CODE(70, _QDUP)
 #  define qdup 70
-  // number
+  // number ( - n -f) gets string from tib
   NAME(71, 0, 6, 'n', 'u', 'm')
   LINK(72, 68)
   CODE(73, _NUMBER)
 #  define number 73
-  // depth
+  // depth ( - n)
   NAME(74, 0, 5, 'd', 'e', 'p')
   LINK(75, 71)
   CODE(76, _DEPTH)
 #  define depth 76
-  // 0<
+  // 0< ( n - f)
   NAME(77, 0, 2, '0', '<', 0)
   LINK(78, 74)
   CODE(79, _ZEROLESS)
@@ -542,7 +812,7 @@ void setup () {
   DATA(103, number)
   DATA(104, zbranch)
   DATA(105, 114) // to ok
-  DATA(106, showtib)
+  DATA(106, nop) // tnr, suppressed with a nop // DATA(106, showtib)
   DATA(107, lit)
   DATA(108, '?')
   DATA(109, emit)
@@ -554,7 +824,7 @@ void setup () {
   DATA(115, branch)
   DATA(116, 90) // continue quit loop
 
-  // .
+  // . ( n - )
   NAME(117, 0, 1, '.', 0, 0)
   LINK(118, 86)
   CODE(119, _DOT)
@@ -574,97 +844,226 @@ void setup () {
   LINK(127, 123)
   CODE(128, _SPACE)
 #  define space 128
-  // h.
+  // h. ( n - )
   NAME(129, 0, 2, 'h', '.', 0)
   LINK(130, 126)
   CODE(131, _HDOT)
 #  define hdot 131
-  // +
+  // + ( n1 n2 - n3)
   NAME(132, 0, 1, '+', 0, 0)
   LINK(133, 129)
   CODE(134, _PLUS)
-  // -
+#  define plus 134
+  // - ( n1 n2 - n3)
   NAME(135, 0, 1, '-', 0, 0)
   LINK(136, 132)
   CODE(137, _MINUS)
-  // and
+  // and (n1 n2 - n3)
   NAME(138, 0, 3, 'a', 'n', 'd')
   LINK(139, 135)
   CODE(140, _aND)
-  // or
+  // or ( n1 n2 - n3)
   NAME(141, 0, 2, 'o', 'r', 0)
   LINK(142, 138)
   CODE(143, _OR)
-  // xor
+  // xor ( n1 n2 - n3)
   NAME(144, 0, 3, 'x', 'o', 'r')
   LINK(145, 141)
   CODE(146, _XOR)
-  // invert
+  // invert ( n1 - n2)
   NAME(147, 0, 6, 'i', 'n', 'v')
   LINK(148, 144)
   CODE(149, _INVERT)
-  // abs
+  // abs ( n1 - n2)
   NAME(150, 0, 3, 'a', 'b', 's')
   LINK(151, 147)
   CODE(152, _ABS)
-  // negate
+  // negate ( n1 - n2)
   NAME(153, 0, 6, 'n', 'e', 'g')
   LINK(154, 150)
   CODE(155, _NEGATE)
-  // 2*
+  // 2* ( n1 - n2)
   NAME(156, 0, 2, '2', '*', 0)
   LINK(157, 153)
   CODE(158, _TWOSTAR)
-  // 2/
+  // 2/ ( n1 - n2)
   NAME(159, 0, 2, '2', '/', 0)
   LINK(160, 156)
   CODE(161, _TWOSLASH)
-
-  // warm
-  NAME(162, 0, 4, 'w', 'a', 'r')
+  // dump ( a n - a+n) 
+  NAME(162, 0, 4, 'd', 'u', 'm')
   LINK(163, 159)
-  CODE(164, _WARM)
-
-  // wlist
-  NAME(165, 0, 5, 'w', 'l', 'i')
+  CODE(164, _DUMP)
+  // create
+  NAME(165, 0, 6, 'c', 'r', 'e')
   LINK(166, 162)
-  CODE(167, _WLIST)
-
-  D = 165; // latest word
-  H = 168; // top of dictionary
+  CODE(167, _CREATE)
+  // here 
+  NAME(168, 0, 4, 'h', 'e', 'r')
+  LINK(169, 165)
+  CODE(170, _HERE)
+  // allot 
+  NAME(171, 0, 5, 'a', 'l', 'l')
+  LINK(172, 168)
+  CODE(173, _ALLOT)
+  // variable 
+  NAME(174, 0, 8, 'v', 'a', 'r')
+  LINK(175, 171)
+  CODE(176, _VARIABLE)
+  // ?
+  NAME(177, 0, 1, '?', 0, 0)
+  LINK(178, 174)
+  CODE(179, _QUESTION)
+  // constant
+  NAME(180, 0, 8, 'c', 'o', 'n')
+  LINK(181, 177)
+  CODE(182, _CONSTANT)
+  // R
+  NAME(183, 0, 1, 'R', 0, 0)
+  LINK(184, 180)
+  CODE(185, _R)
+  // [ 
+  NAME(186, IMMED, 1, '[', 0, 0)
+  LINK(187, 183)
+  CODE(188, _LBRAC)
+  // ]
+  NAME(189, 0, 1, ']', 0, 0)
+  LINK(190, 186)
+  CODE(191, _RBRAC)
+  // :
+  NAME(192, 0, 1, ':', 0, 0)
+  LINK(193, 189)
+  CODE(194, _COLON)
+  // ;
+  NAME(195, IMMED, 1, ';', 0, 0)
+  LINK(196, 192)
+  CODE(197, _SEMI)
+  // i 
+  NAME(198, 0, 1, 'i', 0, 0)
+  LINK(199, 195)
+  CODE(200, _I)
+#  define _i 200
+  // do
+  NAME(201, IMMED, 2, 'd', 'o', 0)
+  LINK(202, 198)
+  CODE(203, _CDO)
+  // loop 
+  NAME(204, IMMED, 4, 'l', 'o', 'o')
+  LINK(205, 201)
+  CODE(206, _CLOOP)
+  // begin 
+  NAME(207, IMMED, 5, 'b', 'e', 'g')
+  LINK(208, 204)
+  CODE(209, _CBEGIN)
+  // until 
+  NAME(210, IMMED, 5, 'u', 'n', 't')
+  LINK(211, 207)
+  CODE(212, _CUNTIL)
+  // if
+  NAME(213, IMMED, 2, 'i', 'f', 0)
+  LINK(214, 210)
+  CODE(215, _CIF)
+  // then
+  NAME(216, IMMED, 4, 't', 'h', 'e')
+  LINK(217, 213)
+  CODE(218, _CTHEN)
+  // else
+  NAME(219, IMMED, 4, 'e', 'l', 's')
+  LINK(220, 216)
+  CODE(221, _CELSE)
+  // forget
+  NAME(222, 0, 6, 'f', 'o', 'r')
+  LINK(223, 219)
+  CODE(224, _FORGET)
+  // '
+  NAME(225, 0, 1, '\'', 0, 0)
+  LINK(226, 222)
+  CODE(227, _TICK)
+  // again
+  NAME(228, IMMED, 5, 'a', 'g', 'a')
+  LINK(229, 225)
+  CODE(230, _CAGAIN)
+  // while
+  NAME(231, IMMED, 5, 'w', 'h', 'i')
+  LINK(232, 228)
+  CODE(233, _CWHILE)  
+  // repeat
+  NAME(234, IMMED, 6, 'r', 'e', 'p')
+  LINK(235, 231)
+  CODE(236, _CREPEAT)
+  // literal 
+  NAME(237, IMMED, 7, 'l', 'i', 't')
+  LINK(238, 234)
+  CODE(239, _CLITERAL)
+  // c@ ( b - c) 
+  NAME(240, 0, 2, 'c', '@', 0)
+  LINK(241, 237)
+  CODE(242, _CFETCH)
+#  define cfetch 242
+  // c! ( c b - ) 
+  NAME(243, 0, 2, 'c', '!', 0)
+  LINK(244, 240)
+  CODE(245, _CSTORE)
+  // type ( b c - ) 
+  NAME(246, 0, 4, 't', 'y', 'p')
+  LINK(247, 243)
+  CODE(248, _NEST)
+  DATA(249, over)
+  DATA(250, plus)
+  DATA(251, swap)
+  DATA(252, ddo)
+  DATA(253, _i)
+  DATA(254, cfetch)
+  DATA(255, emit)
+  DATA(256, lloop)
+  DATA(257, 253)
+  DATA(258, exit)
+  // warm (  - )
+  NAME(259, 0, 4, 'w', 'a', 'r')
+  LINK(260, 246)
+  CODE(261, _WARM)
+  NAME(262, 0, 5, 'w', 'l', 'i')
+  LINK(263, 259)
+  CODE(264, _WLIST)
 
   // test
-  DATA(200, parse)
-  DATA(201, wword)
-  DATA(202, find)
-  DATA(203, dot)
-  DATA(204, number)
-  DATA(205, dot)
-  DATA(206, dot)
-//  DATA(201, wword)
-//  DATA(202, find)
-//  DATA(203, execute)
-  DATA(207, ddots)
-  DATA(208, showtib)
-  DATA(209, branch)
-  DATA(210, 200)
-
+  DATA(300, lit)
+  DATA(301, 10) // i
+  DATA(302, lit)
+  DATA(303, 0) // i
+  DATA(304, ddo)
+  DATA(305, 200) // i
+  DATA(306, dot)
+  DATA(307, lloop)
+  DATA(308, 305)
+  DATA(309, 185) // R
+  DATA(310, dot)
+  DATA(311, ddots)
+  DATA(312, cr)
+  DATA(313, branch)
+  DATA(314, 300)
+
+
+
+  D = 262; // latest word // D = 259;
+  H = 265; // top of dictionary // H = 262;
+
+//  I = 300; // test
   I = abort; // instruction pointer = abort
-//  I = 200; //  test
+  // Serial1.begin (9600);
   Serial1.begin (38400);
   while (!Serial1);
-  Serial1.println ("myForth Arm Cortex - release 0.1.8 (reversed-gg) de wa1tnr - use CTRL J and try the words word");
-  //  _WORDS ();
-  //  _DEPTH ();
-  //  _DDOTS ();
+  _color_black_bg(); _color_yellow_fg();
+  Serial1.println ("myForth Arm Cortex - ItsyBitsyM4 01 AUG 2019 1420z");
 }
 
 // the loop function runs over and over again forever
 void loop() {
   W = memory.data [I++];
   memory.program [W] ();
-  //  delay (300);
+//  delay (300);
 }
 
-
-
+// Turn ON local echo (Ctrl A, E in minicom)
+// Turn OFF added CR
+// Turn OFF added LF

end of first LONG OUTPUT

###bookmark



 $ git add dotstar.cpp

 $ git commit -m "imported from elsewhere" dotstar.cpp
[fload-bb-aa 212244f] imported from elsewhere
 1 file changed, 57 insertions(+)
 create mode 100644 Cortex-Forth/dotstar.cpp

 $ git add Cortex-Forth.ino

 g $ git status | cat
On branch fload-bb-aa
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

	modified:   Cortex-Forth.ino

 $ git commit -m "imported from elsewhere" Cortex-Forth.ino 
[fload-bb-aa bc4c53f] imported from elsewhere
 1 file changed, 529 insertions(+), 130 deletions(-)

 g $ git checkout fload-aa 
Switched to branch 'fload-aa'

 $ cp -p Cortex-Forth.ino fload-ctfx

 $ git checkout fload-bb-aa 
Switched to branch 'fload-bb-aa'

 $ ls   c0ffee   dotstar.cpp  Cortex-Forth.ino  dog.cpp   fload-ctfx
 $ exit
exit

Script done on Wed 07 Aug 2019 08:23:19 PM UTC
